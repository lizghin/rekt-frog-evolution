'use client';

import { create } from 'zustand';
import { persist } from 'zustand/middleware';

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ (SSR –Ω–µ —É–ø–∞–¥—ë—Ç)
const isBrowser = typeof window !== 'undefined';

/** –ë–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã */
interface Character {
  evolutionStage: number;
  name: string;
  emoji: string;
  abilities: string[];
}

interface GameState {
  // —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  isPlaying: boolean;
  isPaused: boolean;      // ‚Üê –¥–æ–±–∞–≤–∏–ª–∏
  isGameOver: boolean;
  score: number;
  highScore: number;
  rektTokens: number;
  lives: number;
  level: number;
  gameTime: number;       // ‚Üê –¥–æ–±–∞–≤–∏–ª–∏ (–º—Å —Å –Ω–∞—á–∞–ª–∞ —Ä–∞–Ω–∞)
  character: Character;

  // –¥–µ–π—Å—Ç–≤–∏—è
  startGame: () => void;
  restartGame: () => void;
  gameOver: () => void;

  addScore: (points: number) => void;
  addTokens: (amount: number) => void;
  loseLife: () => void;

  pauseGame: () => void;      // ‚Üê –¥–æ–±–∞–≤–∏–ª–∏
  resumeGame: () => void;     // ‚Üê –¥–æ–±–∞–≤–∏–ª–∏
  togglePause: () => void;    // ‚Üê –¥–æ–±–∞–≤–∏–ª–∏
  tick: (deltaMs: number) => void; // ‚Üê –¥–æ–±–∞–≤–∏–ª–∏, –Ω–∞—Ä–∞—â–∏–≤–∞–µ—Ç gameTime
}

/** –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */
const initialState: Omit<
  GameState,
  | 'startGame'
  | 'restartGame'
  | 'gameOver'
  | 'addScore'
  | 'addTokens'
  | 'loseLife'
  | 'pauseGame'
  | 'resumeGame'
  | 'togglePause'
  | 'tick'
> = {
  isPlaying: false,
  isPaused: false,
  isGameOver: false,
  score: 0,
  highScore: isBrowser ? parseInt(localStorage.getItem('rektfrog-highscore') || '0') : 0,
  rektTokens: isBrowser ? parseInt(localStorage.getItem('rektfrog-tokens') || '0') : 0,
  lives: 5,
  level: 1,
  gameTime: 0,
  character: {
    evolutionStage: 1,
    name: 'REKT Frog',
    emoji: 'üê∏',
    abilities: ['Jump', 'Survive'],
  },
};

export const useGameStore = create<GameState>()(
  persist(
    (set, get) => ({
      ...initialState,

      /** –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∏–≥—Ä—ã */
      startGame: () =>
        set({
          isPlaying: true,
          isPaused: false,
          isGameOver: false,
          lives: 5,
          score: 0,
          gameTime: 0,
          level: 1,
        }),

      /** –†–µ—Å—Ç–∞—Ä—Ç –ø–æ—Å–ª–µ Game Over */
      restartGame: () =>
        set({
          isPlaying: true,
          isPaused: false,
          isGameOver: false,
          lives: 5,
          score: 0,
          level: 1,
          gameTime: 0,
        }),

      /** –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã */
      gameOver: () => {
        const state = get();
        const newHighScore = Math.max(state.score, state.highScore);

        set({
          isPlaying: false,
          isPaused: false,
          isGameOver: true,
          highScore: newHighScore,
        });

        if (isBrowser) {
          localStorage.setItem('rektfrog-highscore', String(newHighScore));
        }
      },

      /** –û—á–∫–∏ */
      addScore: (points) => set((s) => ({ score: s.score + points })),

      /** –¢–æ–∫–µ–Ω—ã */
      addTokens: (amount) => {
        const newTokens = get().rektTokens + amount;
        set({ rektTokens: newTokens });
        if (isBrowser) {
          localStorage.setItem('rektfrog-tokens', String(newTokens));
        }
      },

      /** –ü–æ—Ç–µ—Ä—è –∂–∏–∑–Ω–∏ */
      loseLife: () => {
        const newLives = get().lives - 1;
        if (newLives <= 0) {
          get().gameOver();
        } else {
          set({ lives: newLives });
        }
      },

      /** –ü–∞—É–∑–∞/—Ä–µ–∑—é–º */
      pauseGame: () => set({ isPaused: true, isPlaying: false }),
      resumeGame: () => set({ isPaused: false, isPlaying: true }),
      togglePause: () => {
        const paused = get().isPaused;
        set({ isPaused: !paused, isPlaying: paused });
      },

      /** –ê–ø–¥–µ–π—Ç —Ç–∞–π–º–µ—Ä–∞ ‚Äî –≤—ã–∑—ã–≤–∞—Ç—å –≤ –∏–≥—Ä–æ–≤–æ–º —Ü–∏–∫–ª–µ */
      tick: (deltaMs) => {
        if (!get().isPlaying) return;
        set((s) => ({ gameTime: s.gameTime + deltaMs }));
      },
    }),
    {
      name: 'rekt-frog-storage',
      skipHydration: true, // –∏–∑–±–µ–≥–∞–µ–º SSR-–≥–∏–¥—Ä–∞—Ü–∏–∏ —Å—Ç–æ—Ä–∞
      // –•—Ä–∞–Ω–∏–º –≤ –ø–µ—Ä—Å–∏—Å—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –Ω—É–∂–Ω–æ –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏
      partialize: (state) => ({
        highScore: state.highScore,
        rektTokens: state.rektTokens,
      }),
    }
  )
);